import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';
import { router } from 'expo-router';
import { loginUser, loginUserAlternative, loginUserSimple, checkAuth, logoutUser, getUserData } from '../api/energia-simple';
import type {
  User,
  LoginRequest,
  SessionState,
} from '../types/auth';

// Contexto de autentica√ß√£o simplificado
interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  isLoading: boolean;
  error: string | null;
  login: (credentials: LoginRequest) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

// Provider de autentica√ß√£o
export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Verificar autentica√ß√£o ao inicializar
  const initializeAuth = useCallback(async () => {
    console.log('üîÑ useAuth: Inicializando autentica√ß√£o...');
    
    try {
      setIsLoading(true);
      setError(null);

      const isAuth = await checkAuth();
      console.log('üîç useAuth: Status de autentica√ß√£o:', isAuth);
      
      if (isAuth) {
        console.log('‚úÖ useAuth: Usu√°rio autenticado, buscando dados...');
        const userData = await getUserData();
        setIsAuthenticated(true);
        setUser(userData || { name: 'Usu√°rio', email: '' });
        console.log('‚úÖ useAuth: Autentica√ß√£o inicializada com sucesso');
      } else {
        console.log('‚ùå useAuth: Usu√°rio n√£o autenticado');
        setIsAuthenticated(false);
        setUser(null);
      }
    } catch (error) {
      console.error('üí• useAuth: Falha ao inicializar auth:', error);
      setIsAuthenticated(false);
      setUser(null);
      setError('Erro ao verificar autentica√ß√£o');
    } finally {
      setIsLoading(false);
      console.log('üèÅ useAuth: Inicializa√ß√£o finalizada');
    }
  }, []);

  // Login com valida√ß√£o integrada
  const login = useCallback(async (credentials: LoginRequest) => {
    console.log('üöÄ useAuth: Iniciando processo de login unificado...');
    
    try {
      setIsLoading(true);
      setError(null);

      // 1. Valida√ß√£o b√°sica de formato
      if (!credentials.email || !credentials.password) {
        console.log('‚ùå useAuth: Credenciais vazias');
        throw new Error('Email e senha s√£o obrigat√≥rios');
      }

      if (!isValidEmail(credentials.email)) {
        console.log('‚ùå useAuth: Email inv√°lido:', credentials.email);
        throw new Error('Formato de email inv√°lido');
      }

      if (credentials.password.length < 3) {
        console.log('‚ùå useAuth: Senha muito curta');
        throw new Error('Senha deve ter pelo menos 3 caracteres');
      }

      console.log('‚úÖ useAuth: Valida√ß√£o de formato OK, iniciando login...');

      // 2. Estrat√©gia de login em cascata (do mais simples ao mais complexo)
      console.log('üéØ useAuth: Tentando login simples e direto...');
      let response = await loginUserSimple({
        email: credentials.email.trim(),
        password: credentials.password
      });

      // Se falhar, tentar m√©todo alternativo
      if (!response.success) {
        console.log('üîÑ useAuth: Login simples falhou, tentando m√©todo alternativo...');
        response = await loginUserAlternative({
          email: credentials.email.trim(),
          password: credentials.password
        });
      }

      // Se ainda falhar, tentar m√©todo completo
      if (!response.success) {
        console.log('‚ö†Ô∏è useAuth: M√©todos anteriores falharam, tentando m√©todo completo...');
        response = await loginUser({
          email: credentials.email.trim(),
          password: credentials.password
        });
      }

      console.log('üì• useAuth: Resposta final da API:', response);

      if (!response.success) {
        console.log('‚ùå useAuth: Todos os m√©todos de login falharam');
        throw new Error('Email ou senha inv√°lidos. Verifique suas credenciais e tente novamente.');
      }

      console.log('‚úÖ useAuth: Login bem-sucedido, buscando dados do usu√°rio...');

      // 3. Buscar dados do usu√°rio ap√≥s login
      const userData = await getUserData();
      
      console.log('üë§ useAuth: Dados do usu√°rio obtidos:', userData);
      
      setIsAuthenticated(true);
      setUser(userData || { name: 'Usu√°rio', email: credentials.email });
      setError(null);

      console.log('üéØ useAuth: Redirecionando para dashboard...');
      // Redirecionar para dashboard
      router.replace('/(tabs)');
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro no login';
      console.error('üí• useAuth: Erro no login:', error);
      setError(errorMessage);
      setIsAuthenticated(false);
      setUser(null);
      throw error;
    } finally {
      setIsLoading(false);
      console.log('üèÅ useAuth: Processo de login unificado finalizado');
    }
  }, []);

  // Logout
  const logout = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Tentar fazer logout na API
      await logoutUser();
    } catch (error) {
      console.warn('Failed to logout on server:', error);
    } finally {
      // Sempre limpar estado local
      setIsAuthenticated(false);
      setUser(null);
      setError(null);
      setIsLoading(false);
      
      // Redirecionar para login
      router.replace('/(auth)/login');
    }
  }, []);

  // Inicializar autentica√ß√£o ao montar o componente
  useEffect(() => {
    initializeAuth();
  }, [initializeAuth]);

  const contextValue: AuthContextType = {
    isAuthenticated,
    user,
    isLoading,
    error,
    login,
    logout,
  };

  return React.createElement(
    AuthContext.Provider,
    { value: contextValue },
    children
  );
}

// Hook para usar o contexto de autentica√ß√£o
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// Hook simples para componentes que s√≥ precisam saber se est√° autenticado
export function useAuthStatus() {
  const { isAuthenticated, isLoading } = useAuth();
  return { isAuthenticated, isLoading };
}

// Utilit√°rios
function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// Valida√ß√£o de senha (pode ser expandida conforme necess√°rio)
export function validatePassword(password: string): string[] {
  const errors: string[] = [];
  
  if (!password) {
    errors.push('Password is required');
    return errors;
  }
  
  if (password.length < 6) {
    errors.push('Password must be at least 6 characters long');
  }
  
  return errors;
}

// Hook para valida√ß√£o de formul√°rio de login
export function useLoginValidation() {
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = useCallback((email: string, password: string) => {
    const newErrors: Record<string, string> = {};

    if (!email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!isValidEmail(email)) {
      newErrors.email = 'Invalid email format';
    }

    const passwordErrors = validatePassword(password);
    if (passwordErrors.length > 0) {
      newErrors.password = passwordErrors[0];
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, []);

  const clearErrors = useCallback(() => {
    setErrors({});
  }, []);

  return { errors, validateForm, clearErrors };
}